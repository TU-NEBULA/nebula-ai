name: Dev Branch EC2 deploy
on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout dev
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Docker image build and push
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PW }}
          repository: wonjun0120/nebula-ai
          tags: latest
        
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install zrok
        run: |
          cd $(mktemp -d)
          
          # Get latest ZROK version
          ZROK_VERSION=$(
            curl -sSf https://api.github.com/repos/openziti/zrok/releases/latest \
            | jq -r '.tag_name'
          )

          # Determine architecture
          case $(uname -m) in
            x86_64)         GOXARCH=amd64 ;;
            aarch64|arm64)  GOXARCH=arm64 ;;
            arm*)           GOXARCH=armv7 ;;
            *)              echo "ERROR: unknown arch '$(uname -m)'" >&2; exit 1 ;;
          esac

          # Download and install zrok
          curl -sSfL \
            "https://github.com/openziti/zrok/releases/download/${ZROK_VERSION}/zrok_${ZROK_VERSION#v}_linux_${GOXARCH}.tar.gz" \
            | tar -xz -f -

          sudo install -o root -g root ./zrok /usr/local/bin/

      - name: Verify zrok installation
        run: zrok version ${{ secrets.ZROK_TOKEN }}

      - name: enable zrok
        run: zrok enable 
          
      - name: Connect to LocalStack EC2 via zrok
        env:
          ZROK_URL: ${{ secrets.ZROK_URL }}
        run: |
          zrok access private $ZROK_URL &
          sleep 5  # Wait for the connection to establish

      - name: Deploy to test, localstack
        uses: appleboy/ssh-action@v0.1.6
        id: deploy-localstack
        if: contains(github.ref, 'dev')
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull wonjun0120/nebula-ai
            docker-compose up -d
            docker image prune -f
